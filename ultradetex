#!/usr/bin/env python


"""
Ultra-power your de-TeX-ing experience.

See `ultradetex -h` for usage information.

For best results, make sure `\\begin{document}` and `\\end{document`
tags surround your text.

The tool `wdiff` is your friend for re-incorporating your edits.

Functions:
    read_file - read a text file into a pandas Series
    write_file - write a pandas Series into a text file
    clean_lines - even more detexing power
    main - run the program
"""


import os

import argparse
import pandas as pd

from prosestyler.checker import Text


PARSER = argparse.ArgumentParser(
    description='Comprehensive de-TeX-ing for use with ProseStyler.' \
                '\n\n NOTE: experimental; `detex` must be installed.')
PARSER.add_argument('file', help='The file to de-TeX.')
PARSER.add_argument('-o', type=str, metavar='outfile',
                    help='Name of output file. (default: <filename>.txt)')
PARSER.add_argument('-d', type=str, metavar='detex_flags', default='r',
                    help='Flags to pass to `detex`. ' \
                         'See `detex -h` for full options. (default: \'r\')')
PARSER.add_argument('-e', type=str, metavar='ignore_envs',
                    default='equation,figure,tabular',
                    help='List of environments for `detex` to ignore. ' \
                         '(default: \'equation,figure,tabular\')')


def read_file(fname:str) -> pd.Series:
    """
    Read text file into pandas Series.

    Arguments:
        fname (str) - path to file

    Returns:
        lines (pd.Series) - file lines
    """
    with open(fname, 'rt') as infile:
        lines = list(infile)
    lines = pd.Series(lines)
    return lines


def write_file(fname:str, series:pd.Series):
    """
    Write pandas Series to text file.

    Passes `series` through a `Text` item to clean up paragraphing issues,
    i.e. when there is a linebreak, but not a paragraph break.

    Arguments:
        fname (str) - output file path
        series (pd.Series) - lines to write.
    """
    text = '\n'.join(series)
    text = Text(text, save_file=fname)


def clean_lines(series:pd.Series) -> pd.Series:
    """
    Clean text lines, especially after `detex`.

    Arguments:
        series (pd.Series) - lines of the file to clean

    Returns:
        ret_value (pd.Series) - cleaned text
    """
    series = series.copy()
    series = series.str.strip()  # Remove trailing whitespace.
    series = series.loc[series.shift() != series]  # Remove consecutive dupes.
    series = series.str.replace(r'\s+', ' ')  # Single spaces everywhere.
    series = series.str.replace('"+', '"')  # Multiple quotes --> single.
    # Remove "noun" where it abuts another alpha character.
    series = series.str.replace(r'([a-zA-Z])noun', r'\1')
    series = series.str.replace(r'noun([a-zA-Z])', r'\1')
    return series


def main(args:argparse.Namespace):
    """
    Perform an ultra-detex of a file.

    Saves a new file that has been ultra-detex-ed.

    Arguments:
        args (argparse.Namespace) - see `ultra_detex -h`
    """
    # Create `o` if not supplied.
    if args.o is None:
        args.o = args.file.replace('.tex', '.txt')
    detex_command = 'detex -%s -e %s %s > %s' % (
        args.d, args.e, args.file, args.o)
    print('Running detex...')
    print('  ', detex_command)
    os.system(detex_command)
    print('Performing additional cleaning...')
    lines = read_file(args.o)
    lines = clean_lines(lines)
    print('Saving your work...')
    write_file(args.o, lines)


if __name__ == '__main__':
    ARGS = PARSER.parse_args()
    main(ARGS)
